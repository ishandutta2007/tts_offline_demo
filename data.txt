ccording to Green and Petre’s cognitive dimensions of
notations (Green and Petre 1996), the closer the programming world is to the problem world, the easier the problemsolving ought to be. This closeness of mapping is usually
*To be presented at the AAAI-20 Workshop on Intelligent Process Automation (IPA-20). An earlier version of this paper was
published and presented at ACM UIST 2019.
low in conventional and EUD programming languages, as
they require users to think about their tasks very differently from how they would think about them in familiar
contexts (Pane, Myers, and others 2001), making programming particularly difficult for end users who are not familiar with programming languages and “computational thinking” (Wing 2006). To address this issue, the concept of natural programming (Myers et al. 2017; Myers, Pane, and Ko
2004) has been proposed to create techniques and tools that
match more closely the ways users think.
Natural language programming is a promising technique
for bridging the gap between user mental models of tasks
and programming languages (Mihalcea, Liu, and Lieberman
2006). It should have a low learning barrier for end users, under the assumption that the majority of end users can already
communicate procedures and structures for familiar tasks
through natural language conversations (Lieberman and Liu
2006; Pane, Myers, and others 2001). Speech is also a natural input modality for users to describe desired program behaviors (Oviatt 1999b). However, existing natural language
programming systems are not adequate for supporting end
user task automation in domain-general tasks. Some prior
systems (e.g., (Price et al. 2000)) directly translate user instructions in natural language into conventional programming languages like Java. This approach requires users to
use unambiguous language with fixed structures similar to
those in conventional programming languages. Therefore, it
does not match the user’s existing mental model of tasks,
imposing significant learning barriers and high cognitive demands on end users.
Other natural language programming approaches
(e.g., (Azaria, Krishnamurthy, and Mitchell 2016;
Fast et al. 2018; Kate, Wong, and Mooney 2005;
Srivastava, Labutov, and Mitchell 2017)) restricted the
problem space to specific task domains, so that they could
constrain the space and the complexity of target program
statements in order to enable the understanding of flexible
user utterances. Such restrictions are due to the limited
capabilities of existing natural language understanding
techniques – they do not yet support robust understanding
of utterances across diverse domains without extensive
training data and structured prior knowledge within each